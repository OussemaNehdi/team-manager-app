
setup for docker WITHOUT DOCKER COMPOSE:
-========================

sudo nano /etc/postgresql/16/main/pg_hba.conf 
and then insert the line  ONLY FOR DOCKER WITHOUT COMPOSE 
host    mydb    myuser    172.17.0.0/16    md5



make sure to change the ip of

docker build -t express-backend .
docker run -d --name express-backend -p 3001:3001 express-backend


#i changed this port to 8080 instead of 80 in case you are running nginx in port 80

docker build -t nginx-reverse-proxy .
docker run -d -p 8080:80 --link express-backend nginx-reverse-proxy
==========================

SETUP FOR DOCKER COMPOSE

sudo nano /etc/postgresql/16/main/pg_hba.conf 
and then insert the line
host    mydb    myuser    172.18.0.0/16    md5

inside the team-manager-app folder
docker compose up --build


=========
PUSHING TO DOCCKER HUB 
x
first create an account and log in to dockerHub

# Tag images
docker tag frontend:latest your-dockerhub-username/frontend:latest
docker tag backend:latest your-dockerhub-username/backend:latest

# Push to Docker Hub or GitHub Container Registry (GHCR)
docker push your-dockerhub-username/frontend:latest
docker push your-dockerhub-username/backend:latest

=============================
CREATING A KUBERNETES CLUSTER IN HOME

first create 2 VM (I used vmware)

one for master node and the other for worker node
database will be running on host and both the frontend and backend will be running on the workers node

join the worker node to master node and then 

go to master node and do the following :

kubectl apply -f bothyamlfilesHERE.yaml







-------======================================================
ADDED const cors = require('cors'); SO FRONTEND CAM COMMUNICATE WITH BACKEND

BACKEND-----------3000
installed node js and npm 



intiliazsed inside backend folder and made type script compatible with express

npm init -y
npm install express typescript ts-node @types/node @types/express
npx tsc --init

made src folder and inside it that file and then runned to start server 

npx ts-node src/index.ts


FRONTEND --------------------3001

to create a react app i did this 

npx create-react-app . --template typescript 

after creatig that file in src called App.tsx

npm start and changed port automatically to 3001 cuz 3000 is a used port



DATABASE--------------------5432
sudo apt install postgresql postgresql-contrib
sudo -u postgres psql
CREATE USER myuser WITH PASSWORD 'mypassword';
CREATE DATABASE mydb OWNER myuser;
GRANT ALL PRIVILEGES ON DATABASE mydb TO myuser; #because this will grant permissions only for database operations
GRANT SELECT ON TABLE tasks TO myuser;
\q

#then in backend 
npm install pg
npm install --save-dev @types/pg

#and create the table
sudo -u postgres psql mydb



CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  email TEXT UNIQUE NOT NULL,
  password TEXT NOT NULL,
  name TEXT,
  admin BOOLEAN DEFAULT false
);


CREATE TABLE workspaces (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  description TEXT,
  owner_id INT REFERENCES users(id) ON DELETE CASCADE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE workspace_memberships (
  user_id INT REFERENCES users(id) ON DELETE CASCADE,
  workspace_id INT REFERENCES workspaces(id) ON DELETE CASCADE,
  role VARCHAR(50) NOT NULL,  -- "member" or "owner"
  PRIMARY KEY (user_id, workspace_id)
);


CREATE TABLE tasks (
  id SERIAL PRIMARY KEY,
  workspace_id INT REFERENCES workspaces(id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  description TEXT,
  deadline TIMESTAMP,
  done BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

grant permission for every table 
RANT SELECT, INSERT, UPDATE, DELETE ON TABLE workspaces TO myuser;
GRANT USAGE, SELECT ON SEQUENCE workspaces_id_seq TO myuser;
etc etc